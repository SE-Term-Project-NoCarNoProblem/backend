generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model admin {
  id              String            @id @db.Uuid
  user            user              @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "admin_user_fk")
  rejected_driver rejected_driver[]
  verified_driver verified_driver[]
}

model chat_log {
  id                 Int      @id @default(autoincrement())
  is_customer_sender Boolean
  message            String
  timestamp          DateTime @db.Timestamptz(6)
  ride_id            String   @db.Uuid
  ride               ride     @relation(fields: [ride_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ride")

  @@index([ride_id], map: "ride_idx")
}

model customer {
  id                        String                @id @db.Uuid
  favorite_pickup_location  Unsupported("point")?
  favorite_dropoff_location Unsupported("point")?
  user                      user                  @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_user_fk")
  ride                      ride[]
}

model driver {
  id              String           @id @db.Uuid
  user            user             @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "driver_user_fk")
  license_pic     String? // TODO: in the end, should not be optional
  rejected_driver rejected_driver?
  verified_driver verified_driver?
  waiting_driver  waiting_driver?
}

model model_type {
  make    String
  model   String
  type    model_type_type
  vehicle vehicle[]

  @@id([make, model])
}

model rejected_driver {
  id        String   @id @db.Uuid
  admin_id  String   @db.Uuid
  timestamp DateTime @db.Timestamptz(6)
  admin     admin    @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "driver_admin")
  driver    driver   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "driver_superclass")
}

model resolve {
  support_id        String         @db.Uuid
  support_ticket_id String         @db.Uuid
  timestamp         DateTime       @db.Timestamptz(3)
  support_ticket    support_ticket @relation(fields: [support_ticket_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "resolve_support_ticket_fk")

  @@id([support_id, support_ticket_id], map: "resolve_pk")
}

model ride {
  id                                       String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  pickup_location                          Unsupported("point")
  destination                              Unsupported("point")
  price                                    Float
  customer_id                              String               @db.Uuid
  driver_id                                String               @db.Uuid
  vehicle_id                               String               @db.Uuid
  timestamp                                DateTime             @db.Timestamptz(6)
  rating                                   Int?
  ride_status                              ride_status
  chat_log                                 chat_log[]
  customer                                 customer             @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer")
  verified_driver                          verified_driver      @relation(fields: [driver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ride_verified_driver_fk")
  vehicle                                  vehicle              @relation(fields: [vehicle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vehicle")
  support_ticket_support_ticket_rideToride support_ticket[]     @relation("support_ticket_rideToride")
  transaction                              transaction[]

  @@index([customer_id], map: "customer_idx_on_ride")
}

model support {
  id   String @id @db.Uuid
  user user   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "support_user_fk")
}

model support_ticket {
  id                             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  is_customer                    Boolean
  ride                           String    @db.Uuid
  timestamp                      DateTime  @db.Timestamptz(6)
  detail                         String
  is_resolved                    Boolean
  resolve                        resolve[]
  ride_support_ticket_rideToride ride      @relation("support_ticket_rideToride", fields: [ride], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ride")
}

model transaction {
  id                 String                                  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  ride_id            String                                  @db.Uuid
  transaction_status transaction_status
  payment_method     transaction_transaction_payment_method?
  reference          String?
  timestamp          DateTime                                @db.Timestamptz(6)
  ride               ride                                    @relation(fields: [ride_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "ride")
}

enum gender {
  male
  female
  nonbinary
}

model user {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  fullname     String
  email        String
  phone_number String
  profile_pic  String?
  id_pic       String? // TODO: in the end, should not be optional
  age          Int? // TODO: in the end, should not be optional
  gender       gender? // TODO: in the end, should not be optional
  admin        admin?
  customer     customer?
  driver       driver?
  support      support?
}

model vehicle {
  id              String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  model           String
  make            String
  registration    String
  color           String
  driver_id       String          @db.Uuid
  ride            ride[]
  model_type      model_type      @relation(fields: [model, make], references: [model, make], onDelete: NoAction, onUpdate: NoAction, map: "model_type")
  verified_driver verified_driver @relation(fields: [driver_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "vehicle_verified_driver_fk")
}

model verified_driver {
  id              String                 @id @db.Uuid
  driver_location Unsupported("point")?
  bank_account    String?
  timestamp       DateTime               @db.Timestamptz(6)
  status          verified_driver_status
  admin_id        String                 @db.Uuid
  ride            ride[]
  vehicle         vehicle[]
  admin           admin                  @relation(fields: [admin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "driver_admin")
  driver          driver                 @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "driver_superclass")
}

model waiting_driver {
  id             String   @id @db.Uuid
  requested_date DateTime @db.Timestamptz(6)
  driver         driver   @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "driver_superclass")
}

enum model_type_type {
  motorcycle
  car
  van
}

enum ride_status {
  ongoing
  completed
  canceled
}

enum transaction_status {
  completed
  pending_payment
  canceled
}

enum transaction_transaction_payment_method {
  direct_transfer
  payment_processor
}

enum verified_driver_status {
  busy
  suspended
  free
}
